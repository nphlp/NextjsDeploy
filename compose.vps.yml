services:
    ssl-manager:
        container_name: ssl-manager-${VPS_SUB_DOMAIN}
        build:
            context: ./
            args:
                - VPS_SUB_DOMAIN=${VPS_SUB_DOMAIN}
            dockerfile: ./Dockerfile.ssl
        labels:
            - traefik.enable=false
        volumes:
            - ./certs-${VPS_SUB_DOMAIN}:/certs

    mysql:
        container_name: mysql-${VPS_SUB_DOMAIN}
        image: mysql:9.3
        restart: unless-stopped
        depends_on:
            ssl-manager:
                condition: service_completed_successfully
        environment:
            - MYSQL_DATABASE=${MYSQL_DATABASE}
            - MYSQL_USER=${MYSQL_USER}
            - MYSQL_PASSWORD=${MYSQL_PASSWORD}
            - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
        volumes:
            # MySQL data (persistent volume)
            - mysql-volume:/var/lib/mysql
            # SSL server certs (read-only)
            - ./certs-${VPS_SUB_DOMAIN}:/etc/mysql/certs:ro
        command:
            [
                "mysqld",
                "--ssl-ca=/etc/mysql/certs/ca.pem",
                "--ssl-cert=/etc/mysql/certs/server-cert.pem",
                "--ssl-key=/etc/mysql/certs/server-key.pem",
            ]
        healthcheck:
            test:
                [
                    "CMD",
                    "mysqladmin",
                    "ping",
                    "-h",
                    "localhost",
                    "-u",
                    "root",
                    "-p${MYSQL_ROOT_PASSWORD}",
                    "--ssl-ca=/etc/mysql/certs/ca.pem",
                ]
            interval: 2s
            timeout: 1s
            retries: 30
            start_period: 10s
        networks:
            - app-network

    nextjs:
        container_name: nextjs-${VPS_SUB_DOMAIN}
        # Provide ENVs to runtime
        env_file:
            - ./stack.env
        build:
            context: ./
            # Provide ARGs to buildtime
            args:
                - NODE_ENV=${NODE_ENV}
                - NEXTJS_STANDALONE=${NEXTJS_STANDALONE}
                - DATABASE_URL=${DATABASE_URL}
                - MYSQL_HOST=${MYSQL_HOST}
                - NEXT_PUBLIC_BASE_URL=${NEXT_PUBLIC_BASE_URL}
            dockerfile: ./Dockerfile
            target: runner
        restart: unless-stopped
        volumes:
            # SSL client certs (read-only)
            - ./certs-${VPS_SUB_DOMAIN}:/app/certs:ro
            # Next.js cache (persistent volume)
            # - nextjs-volume:/app/.next/cache
        depends_on:
            mysql:
                condition: service_healthy
        networks:
            - app-network
            - traefik
        labels:
            - "traefik.enable=true"
            - "traefik.docker.network=traefik"
            - "traefik.http.routers.nextjs-${VPS_SUB_DOMAIN}.rule=Host(`${VPS_SUB_DOMAIN}.${VPS_DOMAIN}`)"
            - "traefik.http.routers.nextjs-${VPS_SUB_DOMAIN}.entrypoints=websecure"
            - "traefik.http.services.nextjs-${VPS_SUB_DOMAIN}.loadbalancer.server.port=3000"
            - "traefik.http.routers.nextjs-${VPS_SUB_DOMAIN}.tls.certresolver=leresolver"

volumes:
    mysql-volume:
        name: mysql-volume-${VPS_SUB_DOMAIN}
        driver: local
    # nextjs-volume:
    #     name: nextjs-volume-${VPS_SUB_DOMAIN}
    #     driver: local

networks:
    app-network:
        name: app-network-${VPS_SUB_DOMAIN}
        driver: bridge
    traefik:
        name: traefik
        external: true
