import WorkScheduleService from "@class/WorkScheduleClass";
import { Prisma } from "@prisma/client";
import {
    WorkScheduleCountProps,
    WorkScheduleCountResponse,
    WorkScheduleFindFirstProps,
    WorkScheduleFindFirstResponse,
    WorkScheduleFindManyProps,
    WorkScheduleFindManyResponse,
    WorkScheduleFindUniqueProps,
    WorkScheduleFindUniqueResponse,
} from "@services/types";
import { cacheLifeApi, hashParamsForCacheKey } from "@utils/FetchConfig";
import { unstable_cacheLife as cacheLife, unstable_cacheTag as cacheTag } from "next/cache";

/**
 * # WorkSchedule Cached Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/cached/{{model}}Cached.hbs` as base template
 * - to generate cached function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Services ========== //

export const WorkScheduleFindFirstCached = async <T extends Prisma.WorkScheduleFindFirstArgs>(
    params: WorkScheduleFindFirstProps<T>,
): Promise<WorkScheduleFindFirstResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All workSchedule services
        "workSchedule",
        // All findFirst services
        "findFirst",
        // All workSchedule findFirst services
        "workSchedule-findFirst",
        // This specific services
        hashParamsForCacheKey("workSchedule-findFirst", params),
    );

    return await WorkScheduleService.findFirst(params);
};

export const WorkScheduleFindUniqueCached = async <T extends Prisma.WorkScheduleFindUniqueArgs>(
    params: WorkScheduleFindUniqueProps<T>,
): Promise<WorkScheduleFindUniqueResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All workSchedule services
        "workSchedule",
        // All findUnique services
        "findUnique",
        // All workSchedule findUnique services
        "workSchedule-findUnique",
        // This specific services
        hashParamsForCacheKey("workSchedule-findUnique", params),
    );

    return await WorkScheduleService.findUnique(params);
};

export const WorkScheduleFindManyCached = async <T extends Prisma.WorkScheduleFindManyArgs>(
    params: WorkScheduleFindManyProps<T>,
): Promise<WorkScheduleFindManyResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All workSchedule services
        "workSchedule",
        // All findMany services
        "findMany",
        // All workSchedule findMany services
        "workSchedule-findMany",
        // This specific services
        hashParamsForCacheKey("workSchedule-findMany", params),
    );

    return await WorkScheduleService.findMany(params);
};

export const WorkScheduleCountCached = async <T extends Prisma.WorkScheduleCountArgs>(
    params: WorkScheduleCountProps<T>,
): Promise<WorkScheduleCountResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All workSchedule services
        "workSchedule",
        // All count services
        "count",
        // All workSchedule count services
        "workSchedule-count",
        // This specific services
        hashParamsForCacheKey("workSchedule-count", params),
    );

    return await WorkScheduleService.count(params);
};
