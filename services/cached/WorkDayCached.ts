import WorkDayService from "@class/WorkDayClass";
import { Prisma } from "@prisma/client";
import {
    WorkDayCountProps,
    WorkDayCountResponse,
    WorkDayFindFirstProps,
    WorkDayFindFirstResponse,
    WorkDayFindManyProps,
    WorkDayFindManyResponse,
    WorkDayFindUniqueProps,
    WorkDayFindUniqueResponse,
} from "@services/types";
import { cacheLifeApi, hashParamsForCacheKey } from "@utils/FetchConfig";
import { unstable_cacheLife as cacheLife, unstable_cacheTag as cacheTag } from "next/cache";

/**
 * # WorkDay Cached Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/cached/{{model}}Cached.hbs` as base template
 * - to generate cached function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Services ========== //

export const WorkDayFindFirstCached = async <T extends Prisma.WorkDayFindFirstArgs>(
    params: WorkDayFindFirstProps<T>,
): Promise<WorkDayFindFirstResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All workDay services
        "workDay",
        // All findFirst services
        "findFirst",
        // All workDay findFirst services
        "workDay-findFirst",
        // This specific services
        hashParamsForCacheKey("workDay-findFirst", params),
    );

    return await WorkDayService.findFirst(params);
};

export const WorkDayFindUniqueCached = async <T extends Prisma.WorkDayFindUniqueArgs>(
    params: WorkDayFindUniqueProps<T>,
): Promise<WorkDayFindUniqueResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All workDay services
        "workDay",
        // All findUnique services
        "findUnique",
        // All workDay findUnique services
        "workDay-findUnique",
        // This specific services
        hashParamsForCacheKey("workDay-findUnique", params),
    );

    return await WorkDayService.findUnique(params);
};

export const WorkDayFindManyCached = async <T extends Prisma.WorkDayFindManyArgs>(
    params: WorkDayFindManyProps<T>,
): Promise<WorkDayFindManyResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All workDay services
        "workDay",
        // All findMany services
        "findMany",
        // All workDay findMany services
        "workDay-findMany",
        // This specific services
        hashParamsForCacheKey("workDay-findMany", params),
    );

    return await WorkDayService.findMany(params);
};

export const WorkDayCountCached = async <T extends Prisma.WorkDayCountArgs>(
    params: WorkDayCountProps<T>,
): Promise<WorkDayCountResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All workDay services
        "workDay",
        // All count services
        "count",
        // All workDay count services
        "workDay-count",
        // This specific services
        hashParamsForCacheKey("workDay-count", params),
    );

    return await WorkDayService.count(params);
};
