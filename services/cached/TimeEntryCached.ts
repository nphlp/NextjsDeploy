import TimeEntryService from "@class/TimeEntryClass";
import { Prisma } from "@prisma/client";
import {
    TimeEntryCountProps,
    TimeEntryCountResponse,
    TimeEntryFindFirstProps,
    TimeEntryFindFirstResponse,
    TimeEntryFindManyProps,
    TimeEntryFindManyResponse,
    TimeEntryFindUniqueProps,
    TimeEntryFindUniqueResponse,
} from "@services/types";
import { cacheLifeApi, hashParamsForCacheKey } from "@utils/FetchConfig";
import { unstable_cacheLife as cacheLife, unstable_cacheTag as cacheTag } from "next/cache";

/**
 * # TimeEntry Cached Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/cached/{{model}}Cached.hbs` as base template
 * - to generate cached function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Services ========== //

export const TimeEntryFindFirstCached = async <T extends Prisma.TimeEntryFindFirstArgs>(
    params: TimeEntryFindFirstProps<T>,
): Promise<TimeEntryFindFirstResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All timeEntry services
        "timeEntry",
        // All findFirst services
        "findFirst",
        // All timeEntry findFirst services
        "timeEntry-findFirst",
        // This specific services
        hashParamsForCacheKey("timeEntry-findFirst", params),
    );

    return await TimeEntryService.findFirst(params);
};

export const TimeEntryFindUniqueCached = async <T extends Prisma.TimeEntryFindUniqueArgs>(
    params: TimeEntryFindUniqueProps<T>,
): Promise<TimeEntryFindUniqueResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All timeEntry services
        "timeEntry",
        // All findUnique services
        "findUnique",
        // All timeEntry findUnique services
        "timeEntry-findUnique",
        // This specific services
        hashParamsForCacheKey("timeEntry-findUnique", params),
    );

    return await TimeEntryService.findUnique(params);
};

export const TimeEntryFindManyCached = async <T extends Prisma.TimeEntryFindManyArgs>(
    params: TimeEntryFindManyProps<T>,
): Promise<TimeEntryFindManyResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All timeEntry services
        "timeEntry",
        // All findMany services
        "findMany",
        // All timeEntry findMany services
        "timeEntry-findMany",
        // This specific services
        hashParamsForCacheKey("timeEntry-findMany", params),
    );

    return await TimeEntryService.findMany(params);
};

export const TimeEntryCountCached = async <T extends Prisma.TimeEntryCountArgs>(
    params: TimeEntryCountProps<T>,
): Promise<TimeEntryCountResponse<T>> => {
    "use cache";

    cacheLife(cacheLifeApi);
    cacheTag(
        // All services
        "services",
        // All timeEntry services
        "timeEntry",
        // All count services
        "count",
        // All timeEntry count services
        "timeEntry-count",
        // This specific services
        hashParamsForCacheKey("timeEntry-count", params),
    );

    return await TimeEntryService.count(params);
};
