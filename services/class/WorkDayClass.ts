import PrismaInstance from "@lib/prisma";
import { Prisma } from "@prisma/client";
import {
    WorkDayCountProps,
    WorkDayCountResponse,
    WorkDayCreateManyProps,
    WorkDayCreateManyResponse,
    WorkDayCreateProps,
    WorkDayCreateResponse,
    WorkDayDeleteManyProps,
    WorkDayDeleteManyResponse,
    WorkDayDeleteProps,
    WorkDayDeleteResponse,
    WorkDayFindFirstProps,
    WorkDayFindFirstResponse,
    WorkDayFindManyProps,
    WorkDayFindManyResponse,
    WorkDayFindUniqueProps,
    WorkDayFindUniqueResponse,
    WorkDayUpdateManyProps,
    WorkDayUpdateManyResponse,
    WorkDayUpdateProps,
    WorkDayUpdateResponse,
    WorkDayUpsertProps,
    WorkDayUpsertResponse,
} from "@services/types";

/**
 * # WorkDay Class Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/class/{{model}}Class.hbs` as base template
 * - to generate class function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

/**
 * ## WorkDay Class
 */
export default class WorkDayService {
    /**
     * ## WorkDay Create (Class)
     */
    static async create<T extends Prisma.WorkDayCreateArgs>(
        props: WorkDayCreateProps<T>,
    ): Promise<WorkDayCreateResponse<T>> {
        try {
            return await PrismaInstance.workDay.create(props);
        } catch (error) {
            throw WorkDayService.error(error);
        }
    }

    /**
     * ## WorkDay Upsert (Class)
     */
    static async upsert<T extends Prisma.WorkDayUpsertArgs>(
        props: WorkDayUpsertProps<T>,
    ): Promise<WorkDayUpsertResponse<T>> {
        try {
            return await PrismaInstance.workDay.upsert(props);
        } catch (error) {
            throw WorkDayService.error(error);
        }
    }

    /**
     * ## WorkDay Update (Class)
     */
    static async update<T extends Prisma.WorkDayUpdateArgs>(
        props: WorkDayUpdateProps<T>,
    ): Promise<WorkDayUpdateResponse<T>> {
        try {
            return await PrismaInstance.workDay.update(props);
        } catch (error) {
            throw WorkDayService.error(error);
        }
    }

    /**
     * ## WorkDay Delete (Class)
     */
    static async delete<T extends Prisma.WorkDayDeleteArgs>(
        props: WorkDayDeleteProps<T>,
    ): Promise<WorkDayDeleteResponse<T>> {
        try {
            return await PrismaInstance.workDay.delete(props);
        } catch (error) {
            throw WorkDayService.error(error);
        }
    }

    /**
     * ## WorkDay Create Many (Class)
     */
    static async createMany<T extends Prisma.WorkDayCreateManyArgs>(
        props: WorkDayCreateManyProps<T>,
    ): Promise<WorkDayCreateManyResponse> {
        try {
            return await PrismaInstance.workDay.createMany(props);
        } catch (error) {
            throw WorkDayService.error(error);
        }
    }

    /**
     * ## WorkDay Update Many (Class)
     */
    static async updateMany<T extends Prisma.WorkDayUpdateManyArgs>(
        props: WorkDayUpdateManyProps<T>,
    ): Promise<WorkDayUpdateManyResponse> {
        try {
            return await PrismaInstance.workDay.updateMany(props);
        } catch (error) {
            throw WorkDayService.error(error);
        }
    }

    /**
     * ## WorkDay Delete Many (Class)
     */
    static async deleteMany<T extends Prisma.WorkDayDeleteManyArgs>(
        props: WorkDayDeleteManyProps<T>,
    ): Promise<WorkDayDeleteManyResponse> {
        try {
            return await PrismaInstance.workDay.deleteMany(props);
        } catch (error) {
            throw WorkDayService.error(error);
        }
    }

    /**
     * ## WorkDay Find First (Class)
     */
    static async findFirst<T extends Prisma.WorkDayFindFirstArgs>(
        props: WorkDayFindFirstProps<T>,
    ): Promise<WorkDayFindFirstResponse<T>> {
        try {
            return await PrismaInstance.workDay.findFirst(props);
        } catch (error) {
            throw WorkDayService.error(error);
        }
    }

    /**
     * ## WorkDay Find Unique (Class)
     */
    static async findUnique<T extends Prisma.WorkDayFindUniqueArgs>(
        props: WorkDayFindUniqueProps<T>,
    ): Promise<WorkDayFindUniqueResponse<T>> {
        try {
            return await PrismaInstance.workDay.findUnique(props);
        } catch (error) {
            throw WorkDayService.error(error);
        }
    }

    /**
     * ## WorkDay Find Many (Class)
     */
    static async findMany<T extends Prisma.WorkDayFindManyArgs>(
        props: WorkDayFindManyProps<T>,
    ): Promise<WorkDayFindManyResponse<T>> {
        try {
            return await PrismaInstance.workDay.findMany(props);
        } catch (error) {
            throw WorkDayService.error(error);
        }
    }

    /**
     * ## WorkDay Count (Class)
     */
    static async count<T extends Prisma.WorkDayCountArgs>(
        props: WorkDayCountProps<T>,
    ): Promise<WorkDayCountResponse<T>> {
        try {
            return await PrismaInstance.workDay.count(props);
        } catch (error) {
            throw WorkDayService.error(error);
        }
    }

    /**
     * ## Error handling (Class)
     */
    private static async error(error: unknown): Promise<{ error: string }> {
        if (process.env.NODE_ENV === "development") {
            const message = (error as Error).message;
            console.error(message);
            throw new Error(message);
        }

        // TODO: add logging
        // await Logging(error);

        // Return safe error message to client
        throw new Error("Something went wrong...");
    }
}
