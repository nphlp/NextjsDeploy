import PrismaInstance from "@lib/prisma";
import { Prisma } from "@prisma/client";
import {
    TimeEntryCountProps,
    TimeEntryCountResponse,
    TimeEntryCreateManyProps,
    TimeEntryCreateManyResponse,
    TimeEntryCreateProps,
    TimeEntryCreateResponse,
    TimeEntryDeleteManyProps,
    TimeEntryDeleteManyResponse,
    TimeEntryDeleteProps,
    TimeEntryDeleteResponse,
    TimeEntryFindFirstProps,
    TimeEntryFindFirstResponse,
    TimeEntryFindManyProps,
    TimeEntryFindManyResponse,
    TimeEntryFindUniqueProps,
    TimeEntryFindUniqueResponse,
    TimeEntryUpdateManyProps,
    TimeEntryUpdateManyResponse,
    TimeEntryUpdateProps,
    TimeEntryUpdateResponse,
    TimeEntryUpsertProps,
    TimeEntryUpsertResponse,
} from "@services/types";

/**
 * # TimeEntry Class Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/class/{{model}}Class.hbs` as base template
 * - to generate class function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

/**
 * ## TimeEntry Class
 */
export default class TimeEntryService {
    /**
     * ## TimeEntry Create (Class)
     */
    static async create<T extends Prisma.TimeEntryCreateArgs>(
        props: TimeEntryCreateProps<T>,
    ): Promise<TimeEntryCreateResponse<T>> {
        try {
            return await PrismaInstance.timeEntry.create(props);
        } catch (error) {
            throw TimeEntryService.error(error);
        }
    }

    /**
     * ## TimeEntry Upsert (Class)
     */
    static async upsert<T extends Prisma.TimeEntryUpsertArgs>(
        props: TimeEntryUpsertProps<T>,
    ): Promise<TimeEntryUpsertResponse<T>> {
        try {
            return await PrismaInstance.timeEntry.upsert(props);
        } catch (error) {
            throw TimeEntryService.error(error);
        }
    }

    /**
     * ## TimeEntry Update (Class)
     */
    static async update<T extends Prisma.TimeEntryUpdateArgs>(
        props: TimeEntryUpdateProps<T>,
    ): Promise<TimeEntryUpdateResponse<T>> {
        try {
            return await PrismaInstance.timeEntry.update(props);
        } catch (error) {
            throw TimeEntryService.error(error);
        }
    }

    /**
     * ## TimeEntry Delete (Class)
     */
    static async delete<T extends Prisma.TimeEntryDeleteArgs>(
        props: TimeEntryDeleteProps<T>,
    ): Promise<TimeEntryDeleteResponse<T>> {
        try {
            return await PrismaInstance.timeEntry.delete(props);
        } catch (error) {
            throw TimeEntryService.error(error);
        }
    }

    /**
     * ## TimeEntry Create Many (Class)
     */
    static async createMany<T extends Prisma.TimeEntryCreateManyArgs>(
        props: TimeEntryCreateManyProps<T>,
    ): Promise<TimeEntryCreateManyResponse> {
        try {
            return await PrismaInstance.timeEntry.createMany(props);
        } catch (error) {
            throw TimeEntryService.error(error);
        }
    }

    /**
     * ## TimeEntry Update Many (Class)
     */
    static async updateMany<T extends Prisma.TimeEntryUpdateManyArgs>(
        props: TimeEntryUpdateManyProps<T>,
    ): Promise<TimeEntryUpdateManyResponse> {
        try {
            return await PrismaInstance.timeEntry.updateMany(props);
        } catch (error) {
            throw TimeEntryService.error(error);
        }
    }

    /**
     * ## TimeEntry Delete Many (Class)
     */
    static async deleteMany<T extends Prisma.TimeEntryDeleteManyArgs>(
        props: TimeEntryDeleteManyProps<T>,
    ): Promise<TimeEntryDeleteManyResponse> {
        try {
            return await PrismaInstance.timeEntry.deleteMany(props);
        } catch (error) {
            throw TimeEntryService.error(error);
        }
    }

    /**
     * ## TimeEntry Find First (Class)
     */
    static async findFirst<T extends Prisma.TimeEntryFindFirstArgs>(
        props: TimeEntryFindFirstProps<T>,
    ): Promise<TimeEntryFindFirstResponse<T>> {
        try {
            return await PrismaInstance.timeEntry.findFirst(props);
        } catch (error) {
            throw TimeEntryService.error(error);
        }
    }

    /**
     * ## TimeEntry Find Unique (Class)
     */
    static async findUnique<T extends Prisma.TimeEntryFindUniqueArgs>(
        props: TimeEntryFindUniqueProps<T>,
    ): Promise<TimeEntryFindUniqueResponse<T>> {
        try {
            return await PrismaInstance.timeEntry.findUnique(props);
        } catch (error) {
            throw TimeEntryService.error(error);
        }
    }

    /**
     * ## TimeEntry Find Many (Class)
     */
    static async findMany<T extends Prisma.TimeEntryFindManyArgs>(
        props: TimeEntryFindManyProps<T>,
    ): Promise<TimeEntryFindManyResponse<T>> {
        try {
            return await PrismaInstance.timeEntry.findMany(props);
        } catch (error) {
            throw TimeEntryService.error(error);
        }
    }

    /**
     * ## TimeEntry Count (Class)
     */
    static async count<T extends Prisma.TimeEntryCountArgs>(
        props: TimeEntryCountProps<T>,
    ): Promise<TimeEntryCountResponse<T>> {
        try {
            return await PrismaInstance.timeEntry.count(props);
        } catch (error) {
            throw TimeEntryService.error(error);
        }
    }

    /**
     * ## Error handling (Class)
     */
    private static async error(error: unknown): Promise<{ error: string }> {
        if (process.env.NODE_ENV === "development") {
            const message = (error as Error).message;
            console.error(message);
            throw new Error(message);
        }

        // TODO: add logging
        // await Logging(error);

        // Return safe error message to client
        throw new Error("Something went wrong...");
    }
}
