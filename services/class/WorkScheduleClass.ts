import PrismaInstance from "@lib/prisma";
import { Prisma } from "@prisma/client";
import {
    WorkScheduleCountProps,
    WorkScheduleCountResponse,
    WorkScheduleCreateManyProps,
    WorkScheduleCreateManyResponse,
    WorkScheduleCreateProps,
    WorkScheduleCreateResponse,
    WorkScheduleDeleteManyProps,
    WorkScheduleDeleteManyResponse,
    WorkScheduleDeleteProps,
    WorkScheduleDeleteResponse,
    WorkScheduleFindFirstProps,
    WorkScheduleFindFirstResponse,
    WorkScheduleFindManyProps,
    WorkScheduleFindManyResponse,
    WorkScheduleFindUniqueProps,
    WorkScheduleFindUniqueResponse,
    WorkScheduleUpdateManyProps,
    WorkScheduleUpdateManyResponse,
    WorkScheduleUpdateProps,
    WorkScheduleUpdateResponse,
    WorkScheduleUpsertProps,
    WorkScheduleUpsertResponse,
} from "@services/types";

/**
 * # WorkSchedule Class Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/class/{{model}}Class.hbs` as base template
 * - to generate class function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

/**
 * ## WorkSchedule Class
 */
export default class WorkScheduleService {
    /**
     * ## WorkSchedule Create (Class)
     */
    static async create<T extends Prisma.WorkScheduleCreateArgs>(
        props: WorkScheduleCreateProps<T>,
    ): Promise<WorkScheduleCreateResponse<T>> {
        try {
            return await PrismaInstance.workSchedule.create(props);
        } catch (error) {
            throw WorkScheduleService.error(error);
        }
    }

    /**
     * ## WorkSchedule Upsert (Class)
     */
    static async upsert<T extends Prisma.WorkScheduleUpsertArgs>(
        props: WorkScheduleUpsertProps<T>,
    ): Promise<WorkScheduleUpsertResponse<T>> {
        try {
            return await PrismaInstance.workSchedule.upsert(props);
        } catch (error) {
            throw WorkScheduleService.error(error);
        }
    }

    /**
     * ## WorkSchedule Update (Class)
     */
    static async update<T extends Prisma.WorkScheduleUpdateArgs>(
        props: WorkScheduleUpdateProps<T>,
    ): Promise<WorkScheduleUpdateResponse<T>> {
        try {
            return await PrismaInstance.workSchedule.update(props);
        } catch (error) {
            throw WorkScheduleService.error(error);
        }
    }

    /**
     * ## WorkSchedule Delete (Class)
     */
    static async delete<T extends Prisma.WorkScheduleDeleteArgs>(
        props: WorkScheduleDeleteProps<T>,
    ): Promise<WorkScheduleDeleteResponse<T>> {
        try {
            return await PrismaInstance.workSchedule.delete(props);
        } catch (error) {
            throw WorkScheduleService.error(error);
        }
    }

    /**
     * ## WorkSchedule Create Many (Class)
     */
    static async createMany<T extends Prisma.WorkScheduleCreateManyArgs>(
        props: WorkScheduleCreateManyProps<T>,
    ): Promise<WorkScheduleCreateManyResponse> {
        try {
            return await PrismaInstance.workSchedule.createMany(props);
        } catch (error) {
            throw WorkScheduleService.error(error);
        }
    }

    /**
     * ## WorkSchedule Update Many (Class)
     */
    static async updateMany<T extends Prisma.WorkScheduleUpdateManyArgs>(
        props: WorkScheduleUpdateManyProps<T>,
    ): Promise<WorkScheduleUpdateManyResponse> {
        try {
            return await PrismaInstance.workSchedule.updateMany(props);
        } catch (error) {
            throw WorkScheduleService.error(error);
        }
    }

    /**
     * ## WorkSchedule Delete Many (Class)
     */
    static async deleteMany<T extends Prisma.WorkScheduleDeleteManyArgs>(
        props: WorkScheduleDeleteManyProps<T>,
    ): Promise<WorkScheduleDeleteManyResponse> {
        try {
            return await PrismaInstance.workSchedule.deleteMany(props);
        } catch (error) {
            throw WorkScheduleService.error(error);
        }
    }

    /**
     * ## WorkSchedule Find First (Class)
     */
    static async findFirst<T extends Prisma.WorkScheduleFindFirstArgs>(
        props: WorkScheduleFindFirstProps<T>,
    ): Promise<WorkScheduleFindFirstResponse<T>> {
        try {
            return await PrismaInstance.workSchedule.findFirst(props);
        } catch (error) {
            throw WorkScheduleService.error(error);
        }
    }

    /**
     * ## WorkSchedule Find Unique (Class)
     */
    static async findUnique<T extends Prisma.WorkScheduleFindUniqueArgs>(
        props: WorkScheduleFindUniqueProps<T>,
    ): Promise<WorkScheduleFindUniqueResponse<T>> {
        try {
            return await PrismaInstance.workSchedule.findUnique(props);
        } catch (error) {
            throw WorkScheduleService.error(error);
        }
    }

    /**
     * ## WorkSchedule Find Many (Class)
     */
    static async findMany<T extends Prisma.WorkScheduleFindManyArgs>(
        props: WorkScheduleFindManyProps<T>,
    ): Promise<WorkScheduleFindManyResponse<T>> {
        try {
            return await PrismaInstance.workSchedule.findMany(props);
        } catch (error) {
            throw WorkScheduleService.error(error);
        }
    }

    /**
     * ## WorkSchedule Count (Class)
     */
    static async count<T extends Prisma.WorkScheduleCountArgs>(
        props: WorkScheduleCountProps<T>,
    ): Promise<WorkScheduleCountResponse<T>> {
        try {
            return await PrismaInstance.workSchedule.count(props);
        } catch (error) {
            throw WorkScheduleService.error(error);
        }
    }

    /**
     * ## Error handling (Class)
     */
    private static async error(error: unknown): Promise<{ error: string }> {
        if (process.env.NODE_ENV === "development") {
            const message = (error as Error).message;
            console.error(message);
            throw new Error(message);
        }

        // TODO: add logging
        // await Logging(error);

        // Return safe error message to client
        throw new Error("Something went wrong...");
    }
}
