import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";
import {
    TimeEntryCountCached,
    TimeEntryFindFirstCached,
    TimeEntryFindManyCached,
    TimeEntryFindUniqueCached,
} from "@services/cached";

/**
 * # TimeEntry Server Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/server/{{model}}Server.hbs` as base template
 * - to generate server function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Types ========== //

// Find First
type TimeEntryFindFirstProps<T extends Prisma.TimeEntryFindFirstArgs> = Prisma.SelectSubset<
    T,
    Prisma.TimeEntryFindFirstArgs
>;
type TimeEntryFindFirstResponse<T extends Prisma.TimeEntryFindFirstArgs> = GetResult<
    Prisma.$TimeEntryPayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

// Find Unique
type TimeEntryFindUniqueProps<T extends Prisma.TimeEntryFindUniqueArgs> = Prisma.SelectSubset<
    T,
    Prisma.TimeEntryFindUniqueArgs
>;
type TimeEntryFindUniqueResponse<T extends Prisma.TimeEntryFindUniqueArgs> = GetResult<
    Prisma.$TimeEntryPayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

// Find Many
type TimeEntryFindManyProps<T extends Prisma.TimeEntryFindManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.TimeEntryFindManyArgs
>;
type TimeEntryFindManyResponse<T extends Prisma.TimeEntryFindManyArgs> = GetResult<
    Prisma.$TimeEntryPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

// Count
type TimeEntryCountProps<T extends Prisma.TimeEntryCountArgs> = Prisma.SelectSubset<T, Prisma.TimeEntryCountArgs>;
type TimeEntryCountResponse<T extends Prisma.TimeEntryCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.TimeEntryCountAggregateOutputType>
        : number;

// ========== Services ========== //

/**
 * ## TimeEntry Find (Server)
 *
 * - SSG compatible
 * - cached function
 *
 * **Note**: function generated from template.
 */
export const TimeEntryFindFirstServer = async <T extends Prisma.TimeEntryFindFirstArgs>(
    params: TimeEntryFindFirstProps<T>,
): Promise<TimeEntryFindFirstResponse<T>> => {
    return await TimeEntryFindFirstCached(params);
};

/**
 * ## TimeEntry Find (Server)
 *
 * - SSG compatible
 * - cached function
 *
 * **Note**: function generated from template.
 */
export const TimeEntryFindUniqueServer = async <T extends Prisma.TimeEntryFindUniqueArgs>(
    params: TimeEntryFindUniqueProps<T>,
): Promise<TimeEntryFindUniqueResponse<T>> => {
    return await TimeEntryFindUniqueCached(params);
};

/**
 * ## TimeEntry Find (Server)
 *
 * - SSG compatible
 * - cached function
 *
 * **Note**: function generated from template.
 */
export const TimeEntryFindManyServer = async <T extends Prisma.TimeEntryFindManyArgs>(
    params: TimeEntryFindManyProps<T>,
): Promise<TimeEntryFindManyResponse<T>> => {
    return await TimeEntryFindManyCached(params);
};

/**
 * ## TimeEntry Find (Server)
 *
 * - SSG compatible
 * - cached function
 *
 * **Note**: function generated from template.
 */
export const TimeEntryCountServer = async <T extends Prisma.TimeEntryCountArgs>(
    params: TimeEntryCountProps<T>,
): Promise<TimeEntryCountResponse<T>> => {
    return await TimeEntryCountCached(params);
};
