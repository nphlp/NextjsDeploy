import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";
import {
    WorkScheduleCountCached,
    WorkScheduleFindFirstCached,
    WorkScheduleFindManyCached,
    WorkScheduleFindUniqueCached,
} from "@services/cached";

/**
 * # WorkSchedule Server Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/server/{{model}}Server.hbs` as base template
 * - to generate server function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Types ========== //

// Find First
type WorkScheduleFindFirstProps<T extends Prisma.WorkScheduleFindFirstArgs> = Prisma.SelectSubset<
    T,
    Prisma.WorkScheduleFindFirstArgs
>;
type WorkScheduleFindFirstResponse<T extends Prisma.WorkScheduleFindFirstArgs> = GetResult<
    Prisma.$WorkSchedulePayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

// Find Unique
type WorkScheduleFindUniqueProps<T extends Prisma.WorkScheduleFindUniqueArgs> = Prisma.SelectSubset<
    T,
    Prisma.WorkScheduleFindUniqueArgs
>;
type WorkScheduleFindUniqueResponse<T extends Prisma.WorkScheduleFindUniqueArgs> = GetResult<
    Prisma.$WorkSchedulePayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

// Find Many
type WorkScheduleFindManyProps<T extends Prisma.WorkScheduleFindManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.WorkScheduleFindManyArgs
>;
type WorkScheduleFindManyResponse<T extends Prisma.WorkScheduleFindManyArgs> = GetResult<
    Prisma.$WorkSchedulePayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

// Count
type WorkScheduleCountProps<T extends Prisma.WorkScheduleCountArgs> = Prisma.SelectSubset<
    T,
    Prisma.WorkScheduleCountArgs
>;
type WorkScheduleCountResponse<T extends Prisma.WorkScheduleCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.WorkScheduleCountAggregateOutputType>
        : number;

// ========== Services ========== //

/**
 * ## WorkSchedule Find (Server)
 *
 * - SSG compatible
 * - cached function
 *
 * **Note**: function generated from template.
 */
export const WorkScheduleFindFirstServer = async <T extends Prisma.WorkScheduleFindFirstArgs>(
    params: WorkScheduleFindFirstProps<T>,
): Promise<WorkScheduleFindFirstResponse<T>> => {
    return await WorkScheduleFindFirstCached(params);
};

/**
 * ## WorkSchedule Find (Server)
 *
 * - SSG compatible
 * - cached function
 *
 * **Note**: function generated from template.
 */
export const WorkScheduleFindUniqueServer = async <T extends Prisma.WorkScheduleFindUniqueArgs>(
    params: WorkScheduleFindUniqueProps<T>,
): Promise<WorkScheduleFindUniqueResponse<T>> => {
    return await WorkScheduleFindUniqueCached(params);
};

/**
 * ## WorkSchedule Find (Server)
 *
 * - SSG compatible
 * - cached function
 *
 * **Note**: function generated from template.
 */
export const WorkScheduleFindManyServer = async <T extends Prisma.WorkScheduleFindManyArgs>(
    params: WorkScheduleFindManyProps<T>,
): Promise<WorkScheduleFindManyResponse<T>> => {
    return await WorkScheduleFindManyCached(params);
};

/**
 * ## WorkSchedule Find (Server)
 *
 * - SSG compatible
 * - cached function
 *
 * **Note**: function generated from template.
 */
export const WorkScheduleCountServer = async <T extends Prisma.WorkScheduleCountArgs>(
    params: WorkScheduleCountProps<T>,
): Promise<WorkScheduleCountResponse<T>> => {
    return await WorkScheduleCountCached(params);
};
