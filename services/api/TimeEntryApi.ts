import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";
import {
    TimeEntryCountCached,
    TimeEntryFindFirstCached,
    TimeEntryFindManyCached,
    TimeEntryFindUniqueCached,
} from "@services/cached";
import { ResponseFormat, parseAndDecodeParams } from "@utils/FetchConfig";
import { NextRequest, NextResponse } from "next/server";

/**
 * # TimeEntry Api Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/api/{{model}}Api.hbs` as base template
 * - to generate api function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Types ========== //

// Find First
type TimeEntryFindFirstProps<T extends Prisma.TimeEntryFindFirstArgs> = Prisma.SelectSubset<
    T,
    Prisma.TimeEntryFindFirstArgs
>;
type TimeEntryFindFirstResponse<T extends Prisma.TimeEntryFindFirstArgs> = GetResult<
    Prisma.$TimeEntryPayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

// Find Unique
type TimeEntryFindUniqueProps<T extends Prisma.TimeEntryFindUniqueArgs> = Prisma.SelectSubset<
    T,
    Prisma.TimeEntryFindUniqueArgs
>;
type TimeEntryFindUniqueResponse<T extends Prisma.TimeEntryFindUniqueArgs> = GetResult<
    Prisma.$TimeEntryPayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

// Find Many
type TimeEntryFindManyProps<T extends Prisma.TimeEntryFindManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.TimeEntryFindManyArgs
>;
type TimeEntryFindManyResponse<T extends Prisma.TimeEntryFindManyArgs> = GetResult<
    Prisma.$TimeEntryPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

// Count
type TimeEntryCountProps<T extends Prisma.TimeEntryCountArgs> = Prisma.SelectSubset<T, Prisma.TimeEntryCountArgs>;
type TimeEntryCountResponse<T extends Prisma.TimeEntryCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.TimeEntryCountAggregateOutputType>
        : number;

// ========== Routes ========== //

type RouteResponse<T> = Promise<NextResponse<ResponseFormat<T>>>;

export type TimeEntryRoutes<Input> = {
    "/internal/timeEntry/findFirst": <T extends Prisma.TimeEntryFindFirstArgs>() => {
        params: TimeEntryFindFirstProps<T>;
        response: TimeEntryFindFirstResponse<Input extends TimeEntryFindFirstProps<T> ? Input : never>;
    };
    "/internal/timeEntry/findUnique": <T extends Prisma.TimeEntryFindUniqueArgs>() => {
        params: TimeEntryFindUniqueProps<T>;
        response: TimeEntryFindUniqueResponse<Input extends TimeEntryFindUniqueProps<T> ? Input : never>;
    };
    "/internal/timeEntry/findMany": <T extends Prisma.TimeEntryFindManyArgs>() => {
        params: TimeEntryFindManyProps<T>;
        response: TimeEntryFindManyResponse<Input extends TimeEntryFindManyProps<T> ? Input : never>;
    };
    "/internal/timeEntry/count": <T extends Prisma.TimeEntryCountArgs>() => {
        params: TimeEntryCountProps<T>;
        response: TimeEntryCountResponse<Input extends TimeEntryCountProps<T> ? Input : never>;
    };
};

// ========== Services ========== //

export const TimeEntryFindFirstApi = async <T extends Prisma.TimeEntryFindFirstArgs>(
    request: NextRequest,
): RouteResponse<TimeEntryFindFirstResponse<T>> => {
    try {
        const params: TimeEntryFindFirstProps<T> = parseAndDecodeParams(request);
        const response: TimeEntryFindFirstResponse<T> = await TimeEntryFindFirstCached(params);
        return NextResponse.json({ data: response }, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: (error as Error).message }, { status: 500 });
    }
};

export const TimeEntryFindUniqueApi = async <T extends Prisma.TimeEntryFindUniqueArgs>(
    request: NextRequest,
): RouteResponse<TimeEntryFindUniqueResponse<T>> => {
    try {
        const params: TimeEntryFindUniqueProps<T> = parseAndDecodeParams(request);
        const response: TimeEntryFindUniqueResponse<T> = await TimeEntryFindUniqueCached(params);
        return NextResponse.json({ data: response }, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: (error as Error).message }, { status: 500 });
    }
};

export const TimeEntryFindManyApi = async <T extends Prisma.TimeEntryFindManyArgs>(
    request: NextRequest,
): RouteResponse<TimeEntryFindManyResponse<T>> => {
    try {
        const params: TimeEntryFindManyProps<T> = parseAndDecodeParams(request);
        const response: TimeEntryFindManyResponse<T> = await TimeEntryFindManyCached(params);
        return NextResponse.json({ data: response }, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: (error as Error).message }, { status: 500 });
    }
};

export const TimeEntryCountApi = async <T extends Prisma.TimeEntryCountArgs>(
    request: NextRequest,
): RouteResponse<TimeEntryCountResponse<T>> => {
    try {
        const params: TimeEntryCountProps<T> = parseAndDecodeParams(request);
        const response: TimeEntryCountResponse<T> = await TimeEntryCountCached(params);
        return NextResponse.json({ data: response }, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: (error as Error).message }, { status: 500 });
    }
};
