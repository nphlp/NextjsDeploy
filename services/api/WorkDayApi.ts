import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";
import {
    WorkDayCountCached,
    WorkDayFindFirstCached,
    WorkDayFindManyCached,
    WorkDayFindUniqueCached,
} from "@services/cached";
import { ResponseFormat, parseAndDecodeParams } from "@utils/FetchConfig";
import { NextRequest, NextResponse } from "next/server";

/**
 * # WorkDay Api Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/api/{{model}}Api.hbs` as base template
 * - to generate api function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Types ========== //

// Find First
type WorkDayFindFirstProps<T extends Prisma.WorkDayFindFirstArgs> = Prisma.SelectSubset<T, Prisma.WorkDayFindFirstArgs>;
type WorkDayFindFirstResponse<T extends Prisma.WorkDayFindFirstArgs> = GetResult<
    Prisma.$WorkDayPayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

// Find Unique
type WorkDayFindUniqueProps<T extends Prisma.WorkDayFindUniqueArgs> = Prisma.SelectSubset<
    T,
    Prisma.WorkDayFindUniqueArgs
>;
type WorkDayFindUniqueResponse<T extends Prisma.WorkDayFindUniqueArgs> = GetResult<
    Prisma.$WorkDayPayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

// Find Many
type WorkDayFindManyProps<T extends Prisma.WorkDayFindManyArgs> = Prisma.SelectSubset<T, Prisma.WorkDayFindManyArgs>;
type WorkDayFindManyResponse<T extends Prisma.WorkDayFindManyArgs> = GetResult<
    Prisma.$WorkDayPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

// Count
type WorkDayCountProps<T extends Prisma.WorkDayCountArgs> = Prisma.SelectSubset<T, Prisma.WorkDayCountArgs>;
type WorkDayCountResponse<T extends Prisma.WorkDayCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.WorkDayCountAggregateOutputType>
        : number;

// ========== Routes ========== //

type RouteResponse<T> = Promise<NextResponse<ResponseFormat<T>>>;

export type WorkDayRoutes<Input> = {
    "/internal/workDay/findFirst": <T extends Prisma.WorkDayFindFirstArgs>() => {
        params: WorkDayFindFirstProps<T>;
        response: WorkDayFindFirstResponse<Input extends WorkDayFindFirstProps<T> ? Input : never>;
    };
    "/internal/workDay/findUnique": <T extends Prisma.WorkDayFindUniqueArgs>() => {
        params: WorkDayFindUniqueProps<T>;
        response: WorkDayFindUniqueResponse<Input extends WorkDayFindUniqueProps<T> ? Input : never>;
    };
    "/internal/workDay/findMany": <T extends Prisma.WorkDayFindManyArgs>() => {
        params: WorkDayFindManyProps<T>;
        response: WorkDayFindManyResponse<Input extends WorkDayFindManyProps<T> ? Input : never>;
    };
    "/internal/workDay/count": <T extends Prisma.WorkDayCountArgs>() => {
        params: WorkDayCountProps<T>;
        response: WorkDayCountResponse<Input extends WorkDayCountProps<T> ? Input : never>;
    };
};

// ========== Services ========== //

export const WorkDayFindFirstApi = async <T extends Prisma.WorkDayFindFirstArgs>(
    request: NextRequest,
): RouteResponse<WorkDayFindFirstResponse<T>> => {
    try {
        const params: WorkDayFindFirstProps<T> = parseAndDecodeParams(request);
        const response: WorkDayFindFirstResponse<T> = await WorkDayFindFirstCached(params);
        return NextResponse.json({ data: response }, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: (error as Error).message }, { status: 500 });
    }
};

export const WorkDayFindUniqueApi = async <T extends Prisma.WorkDayFindUniqueArgs>(
    request: NextRequest,
): RouteResponse<WorkDayFindUniqueResponse<T>> => {
    try {
        const params: WorkDayFindUniqueProps<T> = parseAndDecodeParams(request);
        const response: WorkDayFindUniqueResponse<T> = await WorkDayFindUniqueCached(params);
        return NextResponse.json({ data: response }, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: (error as Error).message }, { status: 500 });
    }
};

export const WorkDayFindManyApi = async <T extends Prisma.WorkDayFindManyArgs>(
    request: NextRequest,
): RouteResponse<WorkDayFindManyResponse<T>> => {
    try {
        const params: WorkDayFindManyProps<T> = parseAndDecodeParams(request);
        const response: WorkDayFindManyResponse<T> = await WorkDayFindManyCached(params);
        return NextResponse.json({ data: response }, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: (error as Error).message }, { status: 500 });
    }
};

export const WorkDayCountApi = async <T extends Prisma.WorkDayCountArgs>(
    request: NextRequest,
): RouteResponse<WorkDayCountResponse<T>> => {
    try {
        const params: WorkDayCountProps<T> = parseAndDecodeParams(request);
        const response: WorkDayCountResponse<T> = await WorkDayCountCached(params);
        return NextResponse.json({ data: response }, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: (error as Error).message }, { status: 500 });
    }
};
