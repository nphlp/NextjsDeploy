import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";
import {
    WorkScheduleCountCached,
    WorkScheduleFindFirstCached,
    WorkScheduleFindManyCached,
    WorkScheduleFindUniqueCached,
} from "@services/cached";
import { ResponseFormat, parseAndDecodeParams } from "@utils/FetchConfig";
import { NextRequest, NextResponse } from "next/server";

/**
 * # WorkSchedule Api Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/api/{{model}}Api.hbs` as base template
 * - to generate api function files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Types ========== //

// Find First
type WorkScheduleFindFirstProps<T extends Prisma.WorkScheduleFindFirstArgs> = Prisma.SelectSubset<
    T,
    Prisma.WorkScheduleFindFirstArgs
>;
type WorkScheduleFindFirstResponse<T extends Prisma.WorkScheduleFindFirstArgs> = GetResult<
    Prisma.$WorkSchedulePayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

// Find Unique
type WorkScheduleFindUniqueProps<T extends Prisma.WorkScheduleFindUniqueArgs> = Prisma.SelectSubset<
    T,
    Prisma.WorkScheduleFindUniqueArgs
>;
type WorkScheduleFindUniqueResponse<T extends Prisma.WorkScheduleFindUniqueArgs> = GetResult<
    Prisma.$WorkSchedulePayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

// Find Many
type WorkScheduleFindManyProps<T extends Prisma.WorkScheduleFindManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.WorkScheduleFindManyArgs
>;
type WorkScheduleFindManyResponse<T extends Prisma.WorkScheduleFindManyArgs> = GetResult<
    Prisma.$WorkSchedulePayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

// Count
type WorkScheduleCountProps<T extends Prisma.WorkScheduleCountArgs> = Prisma.SelectSubset<
    T,
    Prisma.WorkScheduleCountArgs
>;
type WorkScheduleCountResponse<T extends Prisma.WorkScheduleCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.WorkScheduleCountAggregateOutputType>
        : number;

// ========== Routes ========== //

type RouteResponse<T> = Promise<NextResponse<ResponseFormat<T>>>;

export type WorkScheduleRoutes<Input> = {
    "/internal/workSchedule/findFirst": <T extends Prisma.WorkScheduleFindFirstArgs>() => {
        params: WorkScheduleFindFirstProps<T>;
        response: WorkScheduleFindFirstResponse<Input extends WorkScheduleFindFirstProps<T> ? Input : never>;
    };
    "/internal/workSchedule/findUnique": <T extends Prisma.WorkScheduleFindUniqueArgs>() => {
        params: WorkScheduleFindUniqueProps<T>;
        response: WorkScheduleFindUniqueResponse<Input extends WorkScheduleFindUniqueProps<T> ? Input : never>;
    };
    "/internal/workSchedule/findMany": <T extends Prisma.WorkScheduleFindManyArgs>() => {
        params: WorkScheduleFindManyProps<T>;
        response: WorkScheduleFindManyResponse<Input extends WorkScheduleFindManyProps<T> ? Input : never>;
    };
    "/internal/workSchedule/count": <T extends Prisma.WorkScheduleCountArgs>() => {
        params: WorkScheduleCountProps<T>;
        response: WorkScheduleCountResponse<Input extends WorkScheduleCountProps<T> ? Input : never>;
    };
};

// ========== Services ========== //

export const WorkScheduleFindFirstApi = async <T extends Prisma.WorkScheduleFindFirstArgs>(
    request: NextRequest,
): RouteResponse<WorkScheduleFindFirstResponse<T>> => {
    try {
        const params: WorkScheduleFindFirstProps<T> = parseAndDecodeParams(request);
        const response: WorkScheduleFindFirstResponse<T> = await WorkScheduleFindFirstCached(params);
        return NextResponse.json({ data: response }, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: (error as Error).message }, { status: 500 });
    }
};

export const WorkScheduleFindUniqueApi = async <T extends Prisma.WorkScheduleFindUniqueArgs>(
    request: NextRequest,
): RouteResponse<WorkScheduleFindUniqueResponse<T>> => {
    try {
        const params: WorkScheduleFindUniqueProps<T> = parseAndDecodeParams(request);
        const response: WorkScheduleFindUniqueResponse<T> = await WorkScheduleFindUniqueCached(params);
        return NextResponse.json({ data: response }, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: (error as Error).message }, { status: 500 });
    }
};

export const WorkScheduleFindManyApi = async <T extends Prisma.WorkScheduleFindManyArgs>(
    request: NextRequest,
): RouteResponse<WorkScheduleFindManyResponse<T>> => {
    try {
        const params: WorkScheduleFindManyProps<T> = parseAndDecodeParams(request);
        const response: WorkScheduleFindManyResponse<T> = await WorkScheduleFindManyCached(params);
        return NextResponse.json({ data: response }, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: (error as Error).message }, { status: 500 });
    }
};

export const WorkScheduleCountApi = async <T extends Prisma.WorkScheduleCountArgs>(
    request: NextRequest,
): RouteResponse<WorkScheduleCountResponse<T>> => {
    try {
        const params: WorkScheduleCountProps<T> = parseAndDecodeParams(request);
        const response: WorkScheduleCountResponse<T> = await WorkScheduleCountCached(params);
        return NextResponse.json({ data: response }, { status: 200 });
    } catch (error) {
        return NextResponse.json({ error: (error as Error).message }, { status: 500 });
    }
};
