import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";

/**
 * # TimeEntry Type Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/types/{{model}}Type.hbs` as base template
 * - to generate types files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ============== Utils ============== //

type Payload = Prisma.$TimeEntryPayload<InternalArgs>;

type Flatten<T> = T extends infer U ? { [K in keyof U]: U[K] } : never;

// ============== Model ============== //

/**
 * TimeEntry native fields only
 */
export type TimeEntryModel = Flatten<Payload["scalars"]>;

/**
 * TimeEntry relations fields only
 */
export type TimeEntryRelations = {
    [K in keyof Payload["objects"]]: Payload["objects"][K] extends Array<infer T>
        ? T extends { scalars: unknown }
            ? Flatten<T["scalars"]>[]
            : never
        : Payload["objects"][K] extends { scalars: unknown }
          ? Flatten<Payload["objects"][K]["scalars"]>
          : never;
};

/**
 * TimeEntry native and relations fields
 */
export type TimeEntryComplete = Flatten<TimeEntryModel & TimeEntryRelations>;

/**
 * TimeEntry count type
 */
export type TimeEntryCount = number;

// ========== Types ========== //

/**
 * TimeEntry Create props
 */
export type TimeEntryCreateProps<T extends Prisma.TimeEntryCreateArgs = Prisma.TimeEntryCreateArgs> =
    Prisma.SelectSubset<T, Prisma.TimeEntryCreateArgs>;

/**
 * TimeEntry Create response
 */
export type TimeEntryCreateResponse<T extends Prisma.TimeEntryCreateArgs = Prisma.TimeEntryCreateArgs> = GetResult<
    Prisma.$TimeEntryPayload<InternalArgs>,
    T,
    "create",
    PrismaClientOptions
>;

/**
 * TimeEntry Upsert props
 */
export type TimeEntryUpsertProps<T extends Prisma.TimeEntryUpsertArgs = Prisma.TimeEntryUpsertArgs> =
    Prisma.SelectSubset<T, Prisma.TimeEntryUpsertArgs>;

/**
 * TimeEntry Upsert response
 */
export type TimeEntryUpsertResponse<T extends Prisma.TimeEntryUpsertArgs = Prisma.TimeEntryUpsertArgs> = GetResult<
    Prisma.$TimeEntryPayload<InternalArgs>,
    T,
    "upsert",
    PrismaClientOptions
>;

/**
 * TimeEntry Update props
 */
export type TimeEntryUpdateProps<T extends Prisma.TimeEntryUpdateArgs = Prisma.TimeEntryUpdateArgs> =
    Prisma.SelectSubset<T, Prisma.TimeEntryUpdateArgs>;

/**
 * TimeEntry Update response
 */
export type TimeEntryUpdateResponse<T extends Prisma.TimeEntryUpdateArgs = Prisma.TimeEntryUpdateArgs> = GetResult<
    Prisma.$TimeEntryPayload<InternalArgs>,
    T,
    "update",
    PrismaClientOptions
>;

/**
 * TimeEntry Delete props
 */
export type TimeEntryDeleteProps<T extends Prisma.TimeEntryDeleteArgs = Prisma.TimeEntryDeleteArgs> =
    Prisma.SelectSubset<T, Prisma.TimeEntryDeleteArgs>;

/**
 * TimeEntry Delete response
 */
export type TimeEntryDeleteResponse<T extends Prisma.TimeEntryDeleteArgs = Prisma.TimeEntryDeleteArgs> = GetResult<
    Prisma.$TimeEntryPayload<InternalArgs>,
    T,
    "delete",
    PrismaClientOptions
>;

/**
 * TimeEntry Create Many props
 */
export type TimeEntryCreateManyProps<T extends Prisma.TimeEntryCreateManyArgs = Prisma.TimeEntryCreateManyArgs> =
    Prisma.SelectSubset<T, Prisma.TimeEntryCreateManyArgs>;

/**
 * TimeEntry Create Many response
 */
export type TimeEntryCreateManyResponse = Prisma.BatchPayload;

/**
 * TimeEntry Update Many props
 */
export type TimeEntryUpdateManyProps<T extends Prisma.TimeEntryUpdateManyArgs = Prisma.TimeEntryUpdateManyArgs> =
    Prisma.SelectSubset<T, Prisma.TimeEntryUpdateManyArgs>;

/**
 * TimeEntry Update Many response
 */
export type TimeEntryUpdateManyResponse = Prisma.BatchPayload;

/**
 * TimeEntry Delete Many props
 */
export type TimeEntryDeleteManyProps<T extends Prisma.TimeEntryDeleteManyArgs = Prisma.TimeEntryDeleteManyArgs> =
    Prisma.SelectSubset<T, Prisma.TimeEntryDeleteManyArgs>;

/**
 * TimeEntry Delete Many response
 */
export type TimeEntryDeleteManyResponse = Prisma.BatchPayload;

/**
 * TimeEntry Find First props
 */
export type TimeEntryFindFirstProps<T extends Prisma.TimeEntryFindFirstArgs = Prisma.TimeEntryFindFirstArgs> =
    Prisma.SelectSubset<T, Prisma.TimeEntryFindFirstArgs>;

/**
 * TimeEntry Find First response
 */
export type TimeEntryFindFirstResponse<T extends Prisma.TimeEntryFindFirstArgs = Prisma.TimeEntryFindFirstArgs> =
    GetResult<Prisma.$TimeEntryPayload<InternalArgs>, T, "findFirst", PrismaClientOptions>;

/**
 * TimeEntry Find Unique props
 */
export type TimeEntryFindUniqueProps<T extends Prisma.TimeEntryFindUniqueArgs = Prisma.TimeEntryFindUniqueArgs> =
    Prisma.SelectSubset<T, Prisma.TimeEntryFindUniqueArgs>;

/**
 * TimeEntry Find Unique response
 */
export type TimeEntryFindUniqueResponse<T extends Prisma.TimeEntryFindUniqueArgs = Prisma.TimeEntryFindUniqueArgs> =
    GetResult<Prisma.$TimeEntryPayload<InternalArgs>, T, "findUnique", PrismaClientOptions>;

/**
 * TimeEntry Find Many props
 */
export type TimeEntryFindManyProps<T extends Prisma.TimeEntryFindManyArgs = Prisma.TimeEntryFindManyArgs> =
    Prisma.SelectSubset<T, Prisma.TimeEntryFindManyArgs>;

/**
 * TimeEntry Find Many response
 */
export type TimeEntryFindManyResponse<T extends Prisma.TimeEntryFindManyArgs = Prisma.TimeEntryFindManyArgs> =
    GetResult<Prisma.$TimeEntryPayload<InternalArgs>, T, "findMany", PrismaClientOptions>;

/**
 * TimeEntry Count props
 */
export type TimeEntryCountProps<T extends Prisma.TimeEntryCountArgs = Prisma.TimeEntryCountArgs> = Prisma.SelectSubset<
    T,
    Prisma.TimeEntryCountArgs
>;

/**
 * TimeEntry Count response
 */
export type TimeEntryCountResponse<T extends Prisma.TimeEntryCountArgs = Prisma.TimeEntryCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.TimeEntryCountAggregateOutputType>
        : number;
