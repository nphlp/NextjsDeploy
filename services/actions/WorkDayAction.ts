"use server";

import WorkDayService from "@class/WorkDayClass";
// import { requiresSafeMessage } from "@permissions/requiresSafeMessage";
import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";

/**
 * # WorkDay Action Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/actions/{{model}}Action.hbs` as base template
 * - to generate server actions files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Types ========== //

// Create
type WorkDayCreateProps<T extends Prisma.WorkDayCreateArgs> = Prisma.SelectSubset<T, Prisma.WorkDayCreateArgs>;
type WorkDayCreateResponse<T extends Prisma.WorkDayCreateArgs> = GetResult<
    Prisma.$WorkDayPayload<InternalArgs>,
    T,
    "create",
    PrismaClientOptions
>;

// Upsert
type WorkDayUpsertProps<T extends Prisma.WorkDayUpsertArgs> = Prisma.SelectSubset<T, Prisma.WorkDayUpsertArgs>;
type WorkDayUpsertResponse<T extends Prisma.WorkDayUpsertArgs> = GetResult<
    Prisma.$WorkDayPayload<InternalArgs>,
    T,
    "upsert",
    PrismaClientOptions
>;

// Update
type WorkDayUpdateProps<T extends Prisma.WorkDayUpdateArgs> = Prisma.SelectSubset<T, Prisma.WorkDayUpdateArgs>;
type WorkDayUpdateResponse<T extends Prisma.WorkDayUpdateArgs> = GetResult<
    Prisma.$WorkDayPayload<InternalArgs>,
    T,
    "update",
    PrismaClientOptions
>;

// Delete
type WorkDayDeleteProps<T extends Prisma.WorkDayDeleteArgs> = Prisma.SelectSubset<T, Prisma.WorkDayDeleteArgs>;
type WorkDayDeleteResponse<T extends Prisma.WorkDayDeleteArgs> = GetResult<
    Prisma.$WorkDayPayload<InternalArgs>,
    T,
    "delete",
    PrismaClientOptions
>;

// Create Many
type WorkDayCreateManyProps<T extends Prisma.WorkDayCreateManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.WorkDayCreateManyArgs
>;
type WorkDayCreateManyResponse = Prisma.BatchPayload;

// Update Many
type WorkDayUpdateManyProps<T extends Prisma.WorkDayUpdateManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.WorkDayUpdateManyArgs
>;
type WorkDayUpdateManyResponse = Prisma.BatchPayload;

// Delete Many
type WorkDayDeleteManyProps<T extends Prisma.WorkDayDeleteManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.WorkDayDeleteManyArgs
>;
type WorkDayDeleteManyResponse = Prisma.BatchPayload;

// Find First
type WorkDayFindFirstProps<T extends Prisma.WorkDayFindFirstArgs> = Prisma.SelectSubset<T, Prisma.WorkDayFindFirstArgs>;
type WorkDayFindFirstResponse<T extends Prisma.WorkDayFindFirstArgs> = GetResult<
    Prisma.$WorkDayPayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

// Find Unique
type WorkDayFindUniqueProps<T extends Prisma.WorkDayFindUniqueArgs> = Prisma.SelectSubset<
    T,
    Prisma.WorkDayFindUniqueArgs
>;
type WorkDayFindUniqueResponse<T extends Prisma.WorkDayFindUniqueArgs> = GetResult<
    Prisma.$WorkDayPayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

// Find Many
type WorkDayFindManyProps<T extends Prisma.WorkDayFindManyArgs> = Prisma.SelectSubset<T, Prisma.WorkDayFindManyArgs>;
type WorkDayFindManyResponse<T extends Prisma.WorkDayFindManyArgs> = GetResult<
    Prisma.$WorkDayPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

// Count
type WorkDayCountProps<T extends Prisma.WorkDayCountArgs> = Prisma.SelectSubset<T, Prisma.WorkDayCountArgs>;
type WorkDayCountResponse<T extends Prisma.WorkDayCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.WorkDayCountAggregateOutputType>
        : number;

// ========== Services ========== //

/**
 * ## WorkDay Create (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const WorkDayCreateAction = async <T extends Prisma.WorkDayCreateArgs>(
    props: WorkDayCreateProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<WorkDayCreateResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "WorkDayCreateAction", "WorkDay", "create");
    return await WorkDayService.create(props);
};

/**
 * ## WorkDay Upsert (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const WorkDayUpsertAction = async <T extends Prisma.WorkDayUpsertArgs>(
    props: WorkDayUpsertProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<WorkDayUpsertResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "WorkDayUpsertAction", "WorkDay", "upsert");
    return await WorkDayService.upsert(props);
};

/**
 * ## WorkDay Update (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const WorkDayUpdateAction = async <T extends Prisma.WorkDayUpdateArgs>(
    props: WorkDayUpdateProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<WorkDayUpdateResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "WorkDayUpdateAction", "WorkDay", "update");
    return await WorkDayService.update(props);
};

/**
 * ## WorkDay Delete (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const WorkDayDeleteAction = async <T extends Prisma.WorkDayDeleteArgs>(
    props: WorkDayDeleteProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<WorkDayDeleteResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "WorkDayDeleteAction", "WorkDay", "delete");
    return await WorkDayService.delete(props);
};

/**
 * ## WorkDay Create Many (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const WorkDayCreateManyAction = async <T extends Prisma.WorkDayCreateManyArgs>(
    props: WorkDayCreateManyProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<WorkDayCreateManyResponse> => {
    // await requiresSafeMessage(disableSafeMessage, "WorkDayCreateManyAction", "WorkDay", "createMany");
    return await WorkDayService.createMany(props);
};

/**
 * ## WorkDay Update Many (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const WorkDayUpdateManyAction = async <T extends Prisma.WorkDayUpdateManyArgs>(
    props: WorkDayUpdateManyProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<WorkDayUpdateManyResponse> => {
    // await requiresSafeMessage(disableSafeMessage, "WorkDayUpdateManyAction", "WorkDay", "updateMany");
    return await WorkDayService.updateMany(props);
};

/**
 * ## WorkDay Delete Many (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const WorkDayDeleteManyAction = async <T extends Prisma.WorkDayDeleteManyArgs>(
    props: WorkDayDeleteManyProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<WorkDayDeleteManyResponse> => {
    // await requiresSafeMessage(disableSafeMessage, "WorkDayDeleteManyAction", "WorkDay", "deleteMany");
    return await WorkDayService.deleteMany(props);
};

/**
 * ## WorkDay Find First (Server Action)
 *
 * **WARNING**: Server actions can't be cached and parallelized
 *
 * - Do not use this for fetching data, use API routes with caching instead
 * - Use it to get fresh data, without any cache
 *
 *  **Note**: function generated from template.
 */
export const WorkDayFindFirstAction = async <T extends Prisma.WorkDayFindFirstArgs>(
    props: WorkDayFindFirstProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<WorkDayFindFirstResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "WorkDayFindFirstAction", "WorkDay", "findFirst");
    return await WorkDayService.findFirst(props);
};

/**
 * ## WorkDay Find Unique (Server Action)
 *
 * **WARNING**: Server actions can't be cached and parallelized
 *
 * - Do not use this for fetching data, use API routes with caching instead
 * - Use it to get fresh data, without any cache
 *
 *  **Note**: function generated from template.
 */
export const WorkDayFindUniqueAction = async <T extends Prisma.WorkDayFindUniqueArgs>(
    props: WorkDayFindUniqueProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<WorkDayFindUniqueResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "WorkDayFindUniqueAction", "WorkDay", "findUnique");
    return await WorkDayService.findUnique(props);
};

/**
 * ## WorkDay Find Many (Server Action)
 *
 * **WARNING**: Server actions can't be cached and parallelized
 *
 * - Do not use this for fetching data, use API routes with caching instead
 * - Use it to get fresh data, without any cache
 *
 *  **Note**: function generated from template.
 */
export const WorkDayFindManyAction = async <T extends Prisma.WorkDayFindManyArgs>(
    props: WorkDayFindManyProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<WorkDayFindManyResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "WorkDayFindManyAction", "WorkDay", "findMany");
    return await WorkDayService.findMany(props);
};

/**
 * ## WorkDay Count (Server Action)
 *
 * **WARNING**: Server actions can't be cached and parallelized
 *
 * - Do not use this for fetching data, use API routes with caching instead
 * - Use it to get fresh data, without any cache
 *
 *  **Note**: function generated from template.
 */
export const WorkDayCountAction = async <T extends Prisma.WorkDayCountArgs>(
    props: WorkDayCountProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<WorkDayCountResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "WorkDayCountAction", "WorkDay", "count");
    return await WorkDayService.count(props);
};
