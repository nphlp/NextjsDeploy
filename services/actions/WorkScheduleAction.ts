"use server";

import WorkScheduleService from "@class/WorkScheduleClass";
// import { requiresSafeMessage } from "@permissions/requiresSafeMessage";
import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";

/**
 * # WorkSchedule Action Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/actions/{{model}}Action.hbs` as base template
 * - to generate server actions files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Types ========== //

// Create
type WorkScheduleCreateProps<T extends Prisma.WorkScheduleCreateArgs> = Prisma.SelectSubset<
    T,
    Prisma.WorkScheduleCreateArgs
>;
type WorkScheduleCreateResponse<T extends Prisma.WorkScheduleCreateArgs> = GetResult<
    Prisma.$WorkSchedulePayload<InternalArgs>,
    T,
    "create",
    PrismaClientOptions
>;

// Upsert
type WorkScheduleUpsertProps<T extends Prisma.WorkScheduleUpsertArgs> = Prisma.SelectSubset<
    T,
    Prisma.WorkScheduleUpsertArgs
>;
type WorkScheduleUpsertResponse<T extends Prisma.WorkScheduleUpsertArgs> = GetResult<
    Prisma.$WorkSchedulePayload<InternalArgs>,
    T,
    "upsert",
    PrismaClientOptions
>;

// Update
type WorkScheduleUpdateProps<T extends Prisma.WorkScheduleUpdateArgs> = Prisma.SelectSubset<
    T,
    Prisma.WorkScheduleUpdateArgs
>;
type WorkScheduleUpdateResponse<T extends Prisma.WorkScheduleUpdateArgs> = GetResult<
    Prisma.$WorkSchedulePayload<InternalArgs>,
    T,
    "update",
    PrismaClientOptions
>;

// Delete
type WorkScheduleDeleteProps<T extends Prisma.WorkScheduleDeleteArgs> = Prisma.SelectSubset<
    T,
    Prisma.WorkScheduleDeleteArgs
>;
type WorkScheduleDeleteResponse<T extends Prisma.WorkScheduleDeleteArgs> = GetResult<
    Prisma.$WorkSchedulePayload<InternalArgs>,
    T,
    "delete",
    PrismaClientOptions
>;

// Create Many
type WorkScheduleCreateManyProps<T extends Prisma.WorkScheduleCreateManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.WorkScheduleCreateManyArgs
>;
type WorkScheduleCreateManyResponse = Prisma.BatchPayload;

// Update Many
type WorkScheduleUpdateManyProps<T extends Prisma.WorkScheduleUpdateManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.WorkScheduleUpdateManyArgs
>;
type WorkScheduleUpdateManyResponse = Prisma.BatchPayload;

// Delete Many
type WorkScheduleDeleteManyProps<T extends Prisma.WorkScheduleDeleteManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.WorkScheduleDeleteManyArgs
>;
type WorkScheduleDeleteManyResponse = Prisma.BatchPayload;

// Find First
type WorkScheduleFindFirstProps<T extends Prisma.WorkScheduleFindFirstArgs> = Prisma.SelectSubset<
    T,
    Prisma.WorkScheduleFindFirstArgs
>;
type WorkScheduleFindFirstResponse<T extends Prisma.WorkScheduleFindFirstArgs> = GetResult<
    Prisma.$WorkSchedulePayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

// Find Unique
type WorkScheduleFindUniqueProps<T extends Prisma.WorkScheduleFindUniqueArgs> = Prisma.SelectSubset<
    T,
    Prisma.WorkScheduleFindUniqueArgs
>;
type WorkScheduleFindUniqueResponse<T extends Prisma.WorkScheduleFindUniqueArgs> = GetResult<
    Prisma.$WorkSchedulePayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

// Find Many
type WorkScheduleFindManyProps<T extends Prisma.WorkScheduleFindManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.WorkScheduleFindManyArgs
>;
type WorkScheduleFindManyResponse<T extends Prisma.WorkScheduleFindManyArgs> = GetResult<
    Prisma.$WorkSchedulePayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

// Count
type WorkScheduleCountProps<T extends Prisma.WorkScheduleCountArgs> = Prisma.SelectSubset<
    T,
    Prisma.WorkScheduleCountArgs
>;
type WorkScheduleCountResponse<T extends Prisma.WorkScheduleCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.WorkScheduleCountAggregateOutputType>
        : number;

// ========== Services ========== //

/**
 * ## WorkSchedule Create (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const WorkScheduleCreateAction = async <T extends Prisma.WorkScheduleCreateArgs>(
    props: WorkScheduleCreateProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<WorkScheduleCreateResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "WorkScheduleCreateAction", "WorkSchedule", "create");
    return await WorkScheduleService.create(props);
};

/**
 * ## WorkSchedule Upsert (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const WorkScheduleUpsertAction = async <T extends Prisma.WorkScheduleUpsertArgs>(
    props: WorkScheduleUpsertProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<WorkScheduleUpsertResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "WorkScheduleUpsertAction", "WorkSchedule", "upsert");
    return await WorkScheduleService.upsert(props);
};

/**
 * ## WorkSchedule Update (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const WorkScheduleUpdateAction = async <T extends Prisma.WorkScheduleUpdateArgs>(
    props: WorkScheduleUpdateProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<WorkScheduleUpdateResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "WorkScheduleUpdateAction", "WorkSchedule", "update");
    return await WorkScheduleService.update(props);
};

/**
 * ## WorkSchedule Delete (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const WorkScheduleDeleteAction = async <T extends Prisma.WorkScheduleDeleteArgs>(
    props: WorkScheduleDeleteProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<WorkScheduleDeleteResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "WorkScheduleDeleteAction", "WorkSchedule", "delete");
    return await WorkScheduleService.delete(props);
};

/**
 * ## WorkSchedule Create Many (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const WorkScheduleCreateManyAction = async <T extends Prisma.WorkScheduleCreateManyArgs>(
    props: WorkScheduleCreateManyProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<WorkScheduleCreateManyResponse> => {
    // await requiresSafeMessage(disableSafeMessage, "WorkScheduleCreateManyAction", "WorkSchedule", "createMany");
    return await WorkScheduleService.createMany(props);
};

/**
 * ## WorkSchedule Update Many (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const WorkScheduleUpdateManyAction = async <T extends Prisma.WorkScheduleUpdateManyArgs>(
    props: WorkScheduleUpdateManyProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<WorkScheduleUpdateManyResponse> => {
    // await requiresSafeMessage(disableSafeMessage, "WorkScheduleUpdateManyAction", "WorkSchedule", "updateMany");
    return await WorkScheduleService.updateMany(props);
};

/**
 * ## WorkSchedule Delete Many (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const WorkScheduleDeleteManyAction = async <T extends Prisma.WorkScheduleDeleteManyArgs>(
    props: WorkScheduleDeleteManyProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<WorkScheduleDeleteManyResponse> => {
    // await requiresSafeMessage(disableSafeMessage, "WorkScheduleDeleteManyAction", "WorkSchedule", "deleteMany");
    return await WorkScheduleService.deleteMany(props);
};

/**
 * ## WorkSchedule Find First (Server Action)
 *
 * **WARNING**: Server actions can't be cached and parallelized
 *
 * - Do not use this for fetching data, use API routes with caching instead
 * - Use it to get fresh data, without any cache
 *
 *  **Note**: function generated from template.
 */
export const WorkScheduleFindFirstAction = async <T extends Prisma.WorkScheduleFindFirstArgs>(
    props: WorkScheduleFindFirstProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<WorkScheduleFindFirstResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "WorkScheduleFindFirstAction", "WorkSchedule", "findFirst");
    return await WorkScheduleService.findFirst(props);
};

/**
 * ## WorkSchedule Find Unique (Server Action)
 *
 * **WARNING**: Server actions can't be cached and parallelized
 *
 * - Do not use this for fetching data, use API routes with caching instead
 * - Use it to get fresh data, without any cache
 *
 *  **Note**: function generated from template.
 */
export const WorkScheduleFindUniqueAction = async <T extends Prisma.WorkScheduleFindUniqueArgs>(
    props: WorkScheduleFindUniqueProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<WorkScheduleFindUniqueResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "WorkScheduleFindUniqueAction", "WorkSchedule", "findUnique");
    return await WorkScheduleService.findUnique(props);
};

/**
 * ## WorkSchedule Find Many (Server Action)
 *
 * **WARNING**: Server actions can't be cached and parallelized
 *
 * - Do not use this for fetching data, use API routes with caching instead
 * - Use it to get fresh data, without any cache
 *
 *  **Note**: function generated from template.
 */
export const WorkScheduleFindManyAction = async <T extends Prisma.WorkScheduleFindManyArgs>(
    props: WorkScheduleFindManyProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<WorkScheduleFindManyResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "WorkScheduleFindManyAction", "WorkSchedule", "findMany");
    return await WorkScheduleService.findMany(props);
};

/**
 * ## WorkSchedule Count (Server Action)
 *
 * **WARNING**: Server actions can't be cached and parallelized
 *
 * - Do not use this for fetching data, use API routes with caching instead
 * - Use it to get fresh data, without any cache
 *
 *  **Note**: function generated from template.
 */
export const WorkScheduleCountAction = async <T extends Prisma.WorkScheduleCountArgs>(
    props: WorkScheduleCountProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<WorkScheduleCountResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "WorkScheduleCountAction", "WorkSchedule", "count");
    return await WorkScheduleService.count(props);
};
