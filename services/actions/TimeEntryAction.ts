"use server";

import TimeEntryService from "@class/TimeEntryClass";
// import { requiresSafeMessage } from "@permissions/requiresSafeMessage";
import { Prisma } from "@prisma/client";
import { GetResult, InternalArgs, PrismaClientOptions } from "@prisma/client/runtime/library";

/**
 * # TimeEntry Action Services
 *
 * This file:
 * - is generated by the command `pnpm run generate:all`
 * - that executes the script: `scripts/generator.ts`
 * - which uses `template/services/actions/{{model}}Action.hbs` as base template
 * - to generate server actions files for every models available in the `prisma/client/index.d.ts`.
 *
 * > **Warning**: Do not edit this file directly. Your changes will be lost the next time the code is generated.
 */

// ========== Types ========== //

// Create
type TimeEntryCreateProps<T extends Prisma.TimeEntryCreateArgs> = Prisma.SelectSubset<T, Prisma.TimeEntryCreateArgs>;
type TimeEntryCreateResponse<T extends Prisma.TimeEntryCreateArgs> = GetResult<
    Prisma.$TimeEntryPayload<InternalArgs>,
    T,
    "create",
    PrismaClientOptions
>;

// Upsert
type TimeEntryUpsertProps<T extends Prisma.TimeEntryUpsertArgs> = Prisma.SelectSubset<T, Prisma.TimeEntryUpsertArgs>;
type TimeEntryUpsertResponse<T extends Prisma.TimeEntryUpsertArgs> = GetResult<
    Prisma.$TimeEntryPayload<InternalArgs>,
    T,
    "upsert",
    PrismaClientOptions
>;

// Update
type TimeEntryUpdateProps<T extends Prisma.TimeEntryUpdateArgs> = Prisma.SelectSubset<T, Prisma.TimeEntryUpdateArgs>;
type TimeEntryUpdateResponse<T extends Prisma.TimeEntryUpdateArgs> = GetResult<
    Prisma.$TimeEntryPayload<InternalArgs>,
    T,
    "update",
    PrismaClientOptions
>;

// Delete
type TimeEntryDeleteProps<T extends Prisma.TimeEntryDeleteArgs> = Prisma.SelectSubset<T, Prisma.TimeEntryDeleteArgs>;
type TimeEntryDeleteResponse<T extends Prisma.TimeEntryDeleteArgs> = GetResult<
    Prisma.$TimeEntryPayload<InternalArgs>,
    T,
    "delete",
    PrismaClientOptions
>;

// Create Many
type TimeEntryCreateManyProps<T extends Prisma.TimeEntryCreateManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.TimeEntryCreateManyArgs
>;
type TimeEntryCreateManyResponse = Prisma.BatchPayload;

// Update Many
type TimeEntryUpdateManyProps<T extends Prisma.TimeEntryUpdateManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.TimeEntryUpdateManyArgs
>;
type TimeEntryUpdateManyResponse = Prisma.BatchPayload;

// Delete Many
type TimeEntryDeleteManyProps<T extends Prisma.TimeEntryDeleteManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.TimeEntryDeleteManyArgs
>;
type TimeEntryDeleteManyResponse = Prisma.BatchPayload;

// Find First
type TimeEntryFindFirstProps<T extends Prisma.TimeEntryFindFirstArgs> = Prisma.SelectSubset<
    T,
    Prisma.TimeEntryFindFirstArgs
>;
type TimeEntryFindFirstResponse<T extends Prisma.TimeEntryFindFirstArgs> = GetResult<
    Prisma.$TimeEntryPayload<InternalArgs>,
    T,
    "findFirst",
    PrismaClientOptions
>;

// Find Unique
type TimeEntryFindUniqueProps<T extends Prisma.TimeEntryFindUniqueArgs> = Prisma.SelectSubset<
    T,
    Prisma.TimeEntryFindUniqueArgs
>;
type TimeEntryFindUniqueResponse<T extends Prisma.TimeEntryFindUniqueArgs> = GetResult<
    Prisma.$TimeEntryPayload<InternalArgs>,
    T,
    "findUnique",
    PrismaClientOptions
>;

// Find Many
type TimeEntryFindManyProps<T extends Prisma.TimeEntryFindManyArgs> = Prisma.SelectSubset<
    T,
    Prisma.TimeEntryFindManyArgs
>;
type TimeEntryFindManyResponse<T extends Prisma.TimeEntryFindManyArgs> = GetResult<
    Prisma.$TimeEntryPayload<InternalArgs>,
    T,
    "findMany",
    PrismaClientOptions
>;

// Count
type TimeEntryCountProps<T extends Prisma.TimeEntryCountArgs> = Prisma.SelectSubset<T, Prisma.TimeEntryCountArgs>;
type TimeEntryCountResponse<T extends Prisma.TimeEntryCountArgs> =
    // eslint-disable-next-line
    T extends { select: any }
        ? T["select"] extends true
            ? number
            : Prisma.GetScalarType<T["select"], Prisma.TimeEntryCountAggregateOutputType>
        : number;

// ========== Services ========== //

/**
 * ## TimeEntry Create (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const TimeEntryCreateAction = async <T extends Prisma.TimeEntryCreateArgs>(
    props: TimeEntryCreateProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<TimeEntryCreateResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "TimeEntryCreateAction", "TimeEntry", "create");
    return await TimeEntryService.create(props);
};

/**
 * ## TimeEntry Upsert (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const TimeEntryUpsertAction = async <T extends Prisma.TimeEntryUpsertArgs>(
    props: TimeEntryUpsertProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<TimeEntryUpsertResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "TimeEntryUpsertAction", "TimeEntry", "upsert");
    return await TimeEntryService.upsert(props);
};

/**
 * ## TimeEntry Update (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const TimeEntryUpdateAction = async <T extends Prisma.TimeEntryUpdateArgs>(
    props: TimeEntryUpdateProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<TimeEntryUpdateResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "TimeEntryUpdateAction", "TimeEntry", "update");
    return await TimeEntryService.update(props);
};

/**
 * ## TimeEntry Delete (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const TimeEntryDeleteAction = async <T extends Prisma.TimeEntryDeleteArgs>(
    props: TimeEntryDeleteProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<TimeEntryDeleteResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "TimeEntryDeleteAction", "TimeEntry", "delete");
    return await TimeEntryService.delete(props);
};

/**
 * ## TimeEntry Create Many (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const TimeEntryCreateManyAction = async <T extends Prisma.TimeEntryCreateManyArgs>(
    props: TimeEntryCreateManyProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<TimeEntryCreateManyResponse> => {
    // await requiresSafeMessage(disableSafeMessage, "TimeEntryCreateManyAction", "TimeEntry", "createMany");
    return await TimeEntryService.createMany(props);
};

/**
 * ## TimeEntry Update Many (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const TimeEntryUpdateManyAction = async <T extends Prisma.TimeEntryUpdateManyArgs>(
    props: TimeEntryUpdateManyProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<TimeEntryUpdateManyResponse> => {
    // await requiresSafeMessage(disableSafeMessage, "TimeEntryUpdateManyAction", "TimeEntry", "updateMany");
    return await TimeEntryService.updateMany(props);
};

/**
 * ## TimeEntry Delete Many (Server Action)
 *
 * - optimized for mutations
 * - serial execution without cache
 *
 * **Note**: function generated from template.
 */
export const TimeEntryDeleteManyAction = async <T extends Prisma.TimeEntryDeleteManyArgs>(
    props: TimeEntryDeleteManyProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<TimeEntryDeleteManyResponse> => {
    // await requiresSafeMessage(disableSafeMessage, "TimeEntryDeleteManyAction", "TimeEntry", "deleteMany");
    return await TimeEntryService.deleteMany(props);
};

/**
 * ## TimeEntry Find First (Server Action)
 *
 * **WARNING**: Server actions can't be cached and parallelized
 *
 * - Do not use this for fetching data, use API routes with caching instead
 * - Use it to get fresh data, without any cache
 *
 *  **Note**: function generated from template.
 */
export const TimeEntryFindFirstAction = async <T extends Prisma.TimeEntryFindFirstArgs>(
    props: TimeEntryFindFirstProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<TimeEntryFindFirstResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "TimeEntryFindFirstAction", "TimeEntry", "findFirst");
    return await TimeEntryService.findFirst(props);
};

/**
 * ## TimeEntry Find Unique (Server Action)
 *
 * **WARNING**: Server actions can't be cached and parallelized
 *
 * - Do not use this for fetching data, use API routes with caching instead
 * - Use it to get fresh data, without any cache
 *
 *  **Note**: function generated from template.
 */
export const TimeEntryFindUniqueAction = async <T extends Prisma.TimeEntryFindUniqueArgs>(
    props: TimeEntryFindUniqueProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<TimeEntryFindUniqueResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "TimeEntryFindUniqueAction", "TimeEntry", "findUnique");
    return await TimeEntryService.findUnique(props);
};

/**
 * ## TimeEntry Find Many (Server Action)
 *
 * **WARNING**: Server actions can't be cached and parallelized
 *
 * - Do not use this for fetching data, use API routes with caching instead
 * - Use it to get fresh data, without any cache
 *
 *  **Note**: function generated from template.
 */
export const TimeEntryFindManyAction = async <T extends Prisma.TimeEntryFindManyArgs>(
    props: TimeEntryFindManyProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<TimeEntryFindManyResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "TimeEntryFindManyAction", "TimeEntry", "findMany");
    return await TimeEntryService.findMany(props);
};

/**
 * ## TimeEntry Count (Server Action)
 *
 * **WARNING**: Server actions can't be cached and parallelized
 *
 * - Do not use this for fetching data, use API routes with caching instead
 * - Use it to get fresh data, without any cache
 *
 *  **Note**: function generated from template.
 */
export const TimeEntryCountAction = async <T extends Prisma.TimeEntryCountArgs>(
    props: TimeEntryCountProps<T>,
    // disableSafeMessage: boolean = false,
): Promise<TimeEntryCountResponse<T>> => {
    // await requiresSafeMessage(disableSafeMessage, "TimeEntryCountAction", "TimeEntry", "count");
    return await TimeEntryService.count(props);
};
