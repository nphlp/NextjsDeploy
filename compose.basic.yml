services:
    ssl-manager:
        container_name: ssl-manager
        image: alpine:latest
        volumes:
            - ./certs:/certs
            - ./scripts:/scripts:ro
        command: |
            sh -c "
                apk add --no-cache openssl
                sh /scripts/ssl-certs.sh clear
                sh /scripts/ssl-certs.sh generate_safe postgres
            "

    postgres:
        image: postgres:16-alpine
        container_name: postgres
        restart: unless-stopped
        depends_on:
            ssl-manager:
                condition: service_completed_successfully
        environment:
            - POSTGRES_DB=${POSTGRES_DB}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        volumes:
            # PostgreSQL data (persistent volume)
            - postgres-volume:/var/lib/postgresql/data
            # SSL server certs (read-only)
            - ./certs:/etc/ssl/certs:ro
        command:
            [
                "postgres",
                "-c",
                "ssl=on",
                "-c",
                "ssl_cert_file=/etc/ssl/certs/server-cert.pem",
                "-c",
                "ssl_key_file=/etc/ssl/certs/server-key.pem",
                "-c",
                "ssl_ca_file=/etc/ssl/certs/ca.pem",
            ]
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
            interval: 2s
            timeout: 1s
            retries: 30
            start_period: 10s
        networks:
            - app-network

    nextjs:
        container_name: nextjs
        # Provide ENVs to runtime
        env_file:
            - ./.env.merged
        build:
            context: ./
            # Provide ARGs to buildtime
            args:
                - NODE_ENV=${NODE_ENV}
                - NEXTJS_STANDALONE=${NEXTJS_STANDALONE}
                - DATABASE_URL=${DATABASE_URL}
                - POSTGRES_HOST=${POSTGRES_HOST}
                - NEXT_PUBLIC_BASE_URL=${NEXT_PUBLIC_BASE_URL}
            dockerfile: ./Dockerfile
            target: runner
        ports:
            - "3000:3000"
        restart: unless-stopped
        volumes:
            # SSL client certs (read-only)
            - ./certs:/app/certs:ro
            # Next.js cache (persistent volume)
            # - nextjs-volume:/app/.next/cache
        depends_on:
            postgres:
                condition: service_healthy
        networks:
            - app-network

volumes:
    postgres-volume:
        name: postgres-volume
        driver: local
    # nextjs-volume:
    #     name: nextjs-volume
    #     driver: local

networks:
    app-network:
        name: app-network
        driver: bridge
